#pragma once

#include "TourSolver.h"

// Paramters used for the simulation
const int NumberOfAnts = 8;
const double EvaporationFactor = 0.6;
const double alpha = 0.6, beta = 0.4;
const double Q = 50;
const double DefualtPheremone = 1;

const int NumberOfIterators = 1000;

class ACOMk2 : public TourSolver
{
public:
	ACOMk2();
	~ACOMk2();

	std::vector<int> solve(Graph);
};


class SquareMatrix {
public:
	SquareMatrix(int dimension, double defaultValue = 0)
		:dimension(dimension)
	{
		buffer = std::vector<double>(dimension*dimension, defaultValue);
	}

	double get(int x, int y) {
		return buffer[flatten(x, y)];
	}

	void set(int x, int y, double value) {
		buffer[flatten(x, y)] = value;
	}

	inline int flatten(int x, int y) {
		return (x - 1)*dimension + (y - 1);
	}

	void print() {
		for (auto x = 1; x <= dimension; x++)
		{
			for (auto y = 1; y <= dimension; y++) {
				std::cout << get(x, y) << " ";
			}
			std::cout << std::endl;
		}
	}

private:
	int dimension;
	std::vector<double> buffer;
};